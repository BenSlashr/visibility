import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, status, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from app.core.config import settings
from app.core.init_db import init_database
from app.api.v1.router import api_router

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire du cycle de vie de l'application
    Initialise la base de donn√©es au d√©marrage
    """
    logger.info("üöÄ D√©marrage de Visibility Tracker API...")
    
    try:
        # Initialiser la base de donn√©es
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        raise
    
    yield
    
    logger.info("üõë Arr√™t de Visibility Tracker API")

# Cr√©ation de l'instance FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="""
    ## üéØ Visibility Tracker API

    API pour analyser la visibilit√© des marques dans les r√©ponses des LLM.

    ### Fonctionnalit√©s principales :
    - **Projets** : Gestion des projets SEO avec mots-cl√©s et concurrents
    - **Prompts** : Templates de prompts avec variables et tags
    - **Mod√®les IA** : Configuration des mod√®les OpenAI, Anthropic, etc.
    - **Analyses** : Ex√©cution et suivi des analyses de visibilit√©
    - **Statistiques** : M√©triques et rapports de performance

    ### Authentification :
    Actuellement en mode d√©veloppement (pas d'authentification requise).

    ### Liens utiles :
    - [Documentation interactive](/docs)
    - [Sch√©ma OpenAPI](/openapi.json)
    - [Health check](/)
    """,
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
    debug=settings.DEBUG,
    lifespan=lifespan,
    # Support du root path pour le d√©ploiement avec reverse proxy
    root_path=settings.ROOT_PATH
)

# Configuration CORS pour le d√©veloppement
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# Middleware de gestion d'erreurs globales
@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """
    Gestionnaire d'exceptions HTTP personnalis√©
    """
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.method} {request.url}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "status_code": exc.status_code,
            "message": exc.detail,
            "path": str(request.url.path),
            "method": request.method
        }
    )

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    Gestionnaire d'erreurs de validation Pydantic
    """
    logger.warning(f"Erreur de validation: {exc.errors()} - {request.method} {request.url}")
    
    # Nettoyer les erreurs pour la s√©rialisation JSON
    clean_errors = []
    for error in exc.errors():
        clean_error = {
            "type": error.get("type", "unknown"),
            "loc": error.get("loc", []),
            "msg": error.get("msg", "Erreur de validation"),
            "input": str(error.get("input", "")) if error.get("input") is not None else ""
        }
        clean_errors.append(clean_error)
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": True,
            "status_code": 422,
            "message": "Erreur de validation des donn√©es",
            "details": clean_errors,
            "path": str(request.url.path),
            "method": request.method
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    Gestionnaire d'exceptions g√©n√©rales
    """
    logger.error(f"Erreur interne: {str(exc)} - {request.method} {request.url}", exc_info=True)
    
    if settings.DEBUG:
        # En mode debug, retourner les d√©tails de l'erreur
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": True,
                "status_code": 500,
                "message": "Erreur interne du serveur",
                "debug_info": str(exc),
                "path": str(request.url.path),
                "method": request.method
            }
        )
    else:
        # En production, masquer les d√©tails
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": True,
                "status_code": 500,
                "message": "Erreur interne du serveur",
                "path": str(request.url.path),
                "method": request.method
            }
        )

# Health check endpoint
@app.get("/", tags=["health"])
async def health_check():
    """
    Health check endpoint
    
    Retourne le statut de l'API et des informations de base.
    Utile pour les outils de monitoring et les tests de connectivit√©.
    """
    return {
        "status": "healthy",
        "message": "üéØ Visibility Tracker API is running!",
        "app_name": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "debug_mode": settings.DEBUG,
        "docs_url": "/docs",
        "openapi_url": "/openapi.json",
        "endpoints": {
            "projects": "/api/v1/projects/",
            "ai_models": "/api/v1/ai-models/",
            "prompts": "/api/v1/prompts/",
            "analyses": "/api/v1/analyses/"
        }
    }

# Endpoint d'informations d√©taill√©es
@app.get("/info", tags=["health"])
async def app_info():
    """
    Informations d√©taill√©es sur l'application
    
    Utile pour le debugging et la configuration
    """
    return {
        "app_name": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "debug": settings.DEBUG,
        "database_url": settings.DATABASE_URL,
        "cors_origins": settings.BACKEND_CORS_ORIGINS,
        "log_level": settings.LOG_LEVEL,
        "openai_configured": bool(settings.OPENAI_API_KEY),
        "anthropic_configured": bool(settings.ANTHROPIC_API_KEY),
        "default_max_tokens": settings.DEFAULT_MAX_TOKENS,
        "request_timeout": settings.REQUEST_TIMEOUT
    }

# Servir les fichiers statiques du frontend
from fastapi.staticfiles import StaticFiles

# Inclusion du routeur principal API v1
app.include_router(api_router, prefix="/api/v1")

# Servir les fichiers statiques (frontend)
app.mount("/static", StaticFiles(directory="static"), name="static")

# Route pour servir l'index.html √† la racine et pour toutes les routes frontend
from fastapi.responses import FileResponse
import os

@app.get("/{full_path:path}", include_in_schema=False)
async def serve_spa(full_path: str):
    """
    Servir le frontend SPA pour toutes les routes non-API
    """
    # Si c'est une route API, ne pas intercepter
    if full_path.startswith("api/"):
        raise HTTPException(status_code=404, detail="API endpoint not found")
    
    # Si c'est un fichier statique, le servir
    static_file_path = f"static/{full_path}"
    if os.path.exists(static_file_path) and os.path.isfile(static_file_path):
        return FileResponse(static_file_path)
    
    # Sinon, servir index.html pour le SPA
    index_path = "static/index.html"
    if os.path.exists(index_path):
        return FileResponse(index_path)
    else:
        raise HTTPException(status_code=404, detail="Frontend not found")

# Middleware de logging des requ√™tes (optionnel)
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Middleware pour logger les requ√™tes HTTP
    """
    # Logger la requ√™te entrante
    logger.info(f"üì• {request.method} {request.url}")
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Logger la r√©ponse
    logger.info(f"üì§ {request.method} {request.url} - {response.status_code}")
    
    return response

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ D√©marrage en mode d√©veloppement...")
    uvicorn.run(
        "main:app",
        host="127.0.0.1",
        port=8021,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    ) 