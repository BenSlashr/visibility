#!/usr/bin/env python3
"""
Script de test pour le syst√®me NLP complet
Teste la classification, les services et l'API
"""

import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

from app.nlp.topics_classifier import AdvancedTopicsClassifier, quick_classify
from app.nlp.keywords_config import SEO_INTENT_KEYWORDS, BUSINESS_TOPICS


def test_classifier_basic():
    """Test basique du classificateur"""
    print("üß™ Test du classificateur NLP...")
    
    # Test 1: Intention commerciale
    prompt1 = "Quel est le meilleur syst√®me domotique pour une maison ?"
    response1 = """
    Pour choisir le meilleur syst√®me domotique, plusieurs marques se distinguent:
    
    1. **Somfy TaHoma** - Excellent pour les volets roulants, prix abordable
    2. **Legrand Home + Control** - Interface intuitive, bonne compatibilit√©
    3. **Schneider Wiser** - Performance Z-Wave, installation facile
    
    En termes de rapport qualit√©-prix, je recommande Somfy pour d√©buter.
    """
    
    results1 = quick_classify(prompt1, response1, 'domotique')
    print(f"‚úÖ Test commercial - Intent: {results1['seo_intent']['main_intent']} (confiance: {results1['seo_intent']['confidence']})")
    
    # Test 2: Intention informationnelle
    prompt2 = "Comment fonctionne la technologie Z-Wave ?"
    response2 = """
    Z-Wave est un protocole de communication sans fil sp√©cialement con√ßu pour la domotique.
    
    **Principe de fonctionnement:**
    - R√©seau mesh: chaque appareil peut relayer les signaux
    - Fr√©quence 868 MHz en Europe, port√©e jusqu'√† 100m
    - Chiffrement AES-128 pour la s√©curit√©
    
    Les avantages incluent une faible consommation et une grande fiabilit√©.
    """
    
    results2 = quick_classify(prompt2, response2, 'domotique')
    print(f"‚úÖ Test informationnel - Intent: {results2['seo_intent']['main_intent']} (confiance: {results2['seo_intent']['confidence']})")
    
    # Test 3: Intention transactionnelle
    prompt3 = "Comment installer un volet roulant Somfy ?"
    response3 = """
    **Installation √©tape par √©tape:**
    
    1. **Pr√©paration:** Coupez l'√©lectricit√©, pr√©parez les outils
    2. **Montage:** Fixez les supports, installez le moteur Oximo
    3. **C√¢blage:** Connectez l'alimentation selon le sch√©ma
    4. **Configuration:** Programmez les fins de course avec Situo
    5. **Test:** V√©rifiez le fonctionnement complet
    
    Dur√©e: environ 2h pour un bricoleur exp√©riment√©.
    """
    
    results3 = quick_classify(prompt3, response3, 'domotique')
    print(f"‚úÖ Test transactionnel - Intent: {results3['seo_intent']['main_intent']} (confiance: {results3['seo_intent']['confidence']})")


def test_business_topics():
    """Test de la d√©tection des business topics"""
    print("\nüè∑Ô∏è Test des business topics...")
    
    prompt = "Comparaison des prix des syst√®mes domotique avec installation"
    response = """
    **Analyse des co√ªts:**
    
    - **Somfy TaHoma Box:** 199‚Ç¨ + installation 150‚Ç¨ = 349‚Ç¨
    - **Legrand Home + Control:** 299‚Ç¨ + installation 120‚Ç¨ = 419‚Ç¨
    - **Schneider Wiser:** 179‚Ç¨ + installation 180‚Ç¨ = 359‚Ç¨
    
    L'installation est facile avec Legrand (plug and play).
    La s√©curit√© est excellente avec chiffrement sur tous les mod√®les.
    """
    
    results = quick_classify(prompt, response, 'domotique')
    
    print("Business topics d√©tect√©s:")
    for topic in results['business_topics']:
        print(f"  - {topic['topic']}: score {topic['score']} (pertinence: {topic['relevance']})")


def test_entity_extraction():
    """Test de l'extraction d'entit√©s"""
    print("\nüè¢ Test de l'extraction d'entit√©s...")
    
    response = """
    Somfy domine le march√© fran√ßais avec TaHoma et Connexoon.
    Legrand propose Home + Control avec technologie Zigbee.
    Schneider Electric mise sur Wiser et le protocole Z-Wave.
    Les technologies WiFi et Thread gagnent en popularit√©.
    """
    
    results = quick_classify("", response, 'domotique')
    
    print("Entit√©s d√©tect√©es:")
    for entity_type, entities in results['sector_entities'].items():
        print(f"  {entity_type.title()}:")
        for entity in entities:
            if isinstance(entity, dict):
                print(f"    - {entity['name']} (mentions: {entity['count']})")
            else:
                print(f"    - {entity}")


def test_confidence_scoring():
    """Test du syst√®me de scoring de confiance"""
    print("\nüìä Test du scoring de confiance...")
    
    # Texte avec beaucoup de signaux clairs
    high_confidence_text = """
    Comparaison compl√®te: Somfy TaHoma vs Legrand Home + Control
    
    **Prix et installation:**
    - Somfy: 199‚Ç¨, installation facile avec Z-Wave
    - Legrand: 299‚Ç¨, interface intuitive, compatible Zigbee
    
    **Recommandation:** Je conseille Somfy pour le rapport qualit√©-prix.
    Id√©al pour d√©buter en domotique, s√©curit√© optimale.
    """
    
    high_results = quick_classify("Quel syst√®me domotique acheter ?", high_confidence_text, 'domotique')
    
    # Texte avec peu de signaux
    low_confidence_text = "Il existe des solutions."
    
    low_results = quick_classify("Question g√©n√©rale", low_confidence_text, 'domotique')
    
    print(f"‚úÖ Confiance √©lev√©e: {high_results['confidence']}")
    print(f"‚ö†Ô∏è  Confiance faible: {low_results['confidence']}")


def test_keyword_coverage():
    """Test de la couverture des mots-cl√©s"""
    print("\nüìö Test de la couverture des mots-cl√©s...")
    
    # Compter les mots-cl√©s disponibles
    total_seo_keywords = 0
    for intent, categories in SEO_INTENT_KEYWORDS.items():
        for category, keywords in categories.items():
            if category != 'weight' and isinstance(keywords, list):
                total_seo_keywords += len(keywords)
    
    total_business_keywords = 0
    for sector, topics in BUSINESS_TOPICS.items():
        for topic, config in topics.items():
            total_business_keywords += len(config['keywords'])
    
    print(f"üìä Mots-cl√©s SEO: {total_seo_keywords}")
    print(f"üìä Mots-cl√©s business: {total_business_keywords}")
    print(f"üìä Total: {total_seo_keywords + total_business_keywords}")


def test_sector_specific():
    """Test des fonctionnalit√©s sp√©cifiques par secteur"""
    print("\nüéØ Test des secteurs sp√©cialis√©s...")
    
    # Test domotique
    domotique_text = "TaHoma de Somfy utilise Z-Wave pour contr√¥ler les volets"
    domotique_results = quick_classify("", domotique_text, 'domotique')
    
    # Test tech g√©n√©ral
    tech_text = "Cette API offre de bonnes performances et une grande fiabilit√©"
    tech_results = quick_classify("", tech_text, 'tech_general')
    
    print(f"‚úÖ Domotique - Entit√©s: {len(domotique_results['sector_entities'])}")
    print(f"‚úÖ Tech g√©n√©ral - Topics: {len(tech_results['business_topics'])}")


def main():
    """Fonction principale de test"""
    print("üöÄ Test complet du syst√®me NLP Visibility-V2")
    print("=" * 50)
    
    try:
        test_classifier_basic()
        test_business_topics() 
        test_entity_extraction()
        test_confidence_scoring()
        test_keyword_coverage()
        test_sector_specific()
        
        print("\n" + "=" * 50)
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        print("\nüí° Pour tester l'API, utilisez:")
        print("   POST /api/v1/analyses/{analysis_id}/nlp")
        print("   GET  /api/v1/analyses/nlp/project-summary/{project_id}")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()